@page "/book"
@inject HttpClient Http
@using System.Text;
@inject IJSRuntime JsRuntime
@inject IFlightplan Flightplan

<div class="book">
    <h1>Book Your Ticket</h1>

    <EditForm Model="@Ticket" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="passenger">Passenger</label>
            <InputText id="passenger" class="form-control" @bind-Value="@Ticket.Passenger" />
        </div>
        <div class="form-group">
            <label for="date">Date</label>
            <InputDate id="date" class="form-control" @bind-Value="@Ticket.Date" />
        </div>
        <div class="form-group">
            <label for="from">From</label>
            <InputSelect id="from" class="form-control" @bind-Value="@Ticket.From">
                @if (Bases != null)
                {
                    <option value=""></option>
                    foreach (var b in Bases)
                    {
                        <option value="@b.Name">@b.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="to">To</label>
            <InputSelect id="to" class="form-control" @bind-Value="@Ticket.To">
                @if (Bases != null)
                {
                    <option value=""></option>
                    foreach (var b in Bases)
                    {
                        <option value="@b.Name">@b.Name</option>
                    }
                }
            </InputSelect>
        </div>

        <ValidationSummary />

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

</div>

@functions {
    private Ticket Ticket { get; set; } = new Ticket { Date = DateTime.Today };
    private Base[] Bases { get; set; }
    private Connection[] Connections { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Bases = await GetBasisAsync();
        Connections = await GetConnectionsAsync();
    }

    private async Task<Connection[]> GetConnectionsAsync()
    {
        var response = await Http.GetAsync("http://localhost:5000/api/connections");
        var connectionsJson = await response.Content.ReadAsStringAsync();
        var connections = JsonSerializer.Deserialize<Connection[]>(connectionsJson, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        });
        return connections;
    }

    private async Task<Base[]> GetBasisAsync()
    {
        var response = await Http.GetAsync("http://localhost:5000/api/bases");
        var basesJson = await response.Content.ReadAsStringAsync();
        var bases = JsonSerializer.Deserialize<Base[]>(basesJson, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        });
        return bases;
    }

    private async Task PostTicket(Ticket ticket)
    {
        var content = new StringContent(JsonSerializer.Serialize(ticket), Encoding.UTF8, "application/json");
        await Http.PostAsync("http://localhost:5000/api/tickets", content);
    }

    private async Task HandleValidSubmit()
    {
        // To demo reuse of validation logic uncomment the following line:
        // Ticket.Passenger = string.Empty;

        var path = Flightplan.CalculateShortestPath(Connections, Bases, Ticket.From, Ticket.To);
        if (path.Length == 0)
        {
            await JsRuntime.InvokeAsync<object>("starshipTravel.alert", "Sorry, no connection for this route");
            return;
        }
        else if (path.Length > 2)
        {
            var route = string.Join("-> ", path.Select(p => p.Name));
            if (!await JsRuntime.InvokeAsync<bool>("starshipTravel.confirm", $"No direct route, we can offer {route}, ok?"))
            {
                return;
            }
        }

        await PostTicket(Ticket);
    }
}
