@page "/book"
@inject HttpClient Http

<div class="book">
    <h1>Book Your Ticket</h1>

    <EditForm Model="@Ticket" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="passenger">Passenger</label>
            <InputText id="passenger" class="form-control" bind-Value="@Ticket.Passenger" />
        </div>
        <div class="form-group">
            <label for="date">Date</label>
            <InputDate id="date" class="form-control" bind-Value="@Ticket.Date" />
        </div>
        <div class="form-group">
            <label for="from">From</label>
            <InputSelect id="from" class="form-control" bind-Value="@Ticket.From">
                @if (Bases != null)
                {
                    <option value=""></option>
                    foreach (var b in Bases)
                    {
                        <option value="@b.Name">@b.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="to">To</label>
            <InputSelect id="to" class="form-control" bind-Value="@Ticket.To">
                @if (Bases != null)
                {
                    <option value=""></option>
                    foreach (var b in Bases)
                    {
                        <option value="@b.Name">@b.Name</option>
                    }
                }
            </InputSelect>
        </div>

        <ValidationSummary />

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

</div>

@functions {
    private Ticket Ticket { get; set; } = new Ticket { Date = DateTime.Today };
    private Base[] Bases { get; set; }
    private Connection[] Connections { get; set; }

    protected override async Task OnInitAsync()
    {
        Bases = await Http.GetJsonAsync<Base[]>($"http://localhost:5000/api/bases");
        Connections = await Http.GetJsonAsync<Connection[]>($"http://localhost:5000/api/connections");
    }

    private async Task HandleValidSubmit()
    {
        // To demo reuse of validation logic uncomment the following line:
        // Ticket.Passenger = string.Empty;

        await Http.PostJsonAsync("http://localhost:5000/api/tickets", Ticket);
    }
}
